#!/usr/bin/env python

from numpy import array, zeros, zeros_like, dot, diag, diagonal, exp, pi, linspace, sin, sqrt
from numpy.linalg import norm
from numpy.random import seed
from scipy.sparse import csc_matrix
import matplotlib.pyplot as plt
import os

# 1
def is_nn_hopping(n, state1, state2):
    if state1 == state2:
        return 0
    d = state1 ^ state2
    if state1 & d == 0 or state2 & d == 0:
        return 0
    return int(d % 3 == 0 and d // 3 & d // 3 - 1 == 0) + int(d == (1 << n - 1) + 1)

def get_spin(n, state, i):
    return 1 / 2 - (state >> i % n & 1)

def xxx_element(n, state1, state2):
    result = 0
    if state1 == state2:
        for i in range(n):
            result += 1 / 4 - get_spin(n, state1, i) * get_spin(n, state1, i + 1)
    result -= is_nn_hopping(n, state1, state2) / 2
    return result

def xxx_hamiltonian_sparse(n):
    result = csc_matrix((1 << n, 1 << n))
    for state in range(1 << n):
        if state == 0:
            continue
        if state >> n - 1 == 1 and state & 1 == 0:
            hop_state = state ^ (1 << n - 1) ^ 1
            result[state, hop_state] -= 1 / 2
            result[hop_state, state] -= 1 / 2
        mark_state = state & -2
        while mark_state > 0:
            new_mark_state = mark_state & mark_state - 1
            one_down_state = (mark_state ^ new_mark_state) >> 1
            if state & one_down_state == 0:
                hop_state = state ^ (one_down_state * 3)
                result[state, hop_state] -= 1 / 2
                result[hop_state, state] -= 1 / 2
            mark_state = new_mark_state
        for i in range(n):
            result[state, state] += 1 / 4 - get_spin(n, state, i) * get_spin(n, state, i + 1)
    return result

# 2
def gram_schmidt(A):
    m, n = A.shape
    Q = zeros((m, n))
    R = zeros((n, n))
    for i in range(n):
        v = A[:, i]
        for j in range(i):
            R[j, i] = dot(Q[:, j], A[:, i])
            v = v - R[j, i] * Q[:, j]
        R[i, i] = norm(v)
        Q[:, i] = v / R[i, i]
    return Q, R

def qr_diagonalize(H, tol=1e-10, max_iter=1000):
    H_k = array(H)
    for _ in range(max_iter):
        Q, R = gram_schmidt(H_k)
        H_k = R @ Q
        if norm(H_k - diag(diagonal(H_k))) < tol:
            break
    return H_k

# 3
def magnon(n, p):
    result = zeros(1 << n, dtype=complex)
    for i in range(n):
        result[1 << i] = exp(1j * p * i)
    return result

def energy(n, p):
    result = 0
    for i in range(n):
        result += xxx_element(n, 1 << 0, 1 << i) * exp(1j * p * i)
    return result.real

# 4
n = 30
energies = [energy(n, 2 * pi * k / n) for k in range(n)]
save_path = "/root/Desktop/host/Section4/Task2/"
if not os.path.exists(save_path):
    os.makedirs(save_path)

plot_path = os.path.join(save_path, "magnon_energy_plot.png")
k = linspace(0, n, 100)
plt.scatter(range(n), energies)
plt.plot(k, 2 * sin(pi * k / n) ** 2)
plt.xlabel(r'$Np/2\pi$')
plt.ylabel('Energy')
plt.savefig(plot_path)
plt.show()
